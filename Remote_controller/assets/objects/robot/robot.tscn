[gd_scene load_steps=13 format=3 uid="uid://cgox167shdv31"]

[ext_resource type="Script" path="res://assets/objects/robot/virtual_robot.gd" id="2_q6eyh"]
[ext_resource type="Material" uid="uid://cyijkjkcjpo71" path="res://addons/kenney_prototype_tools/materials/dark/material_05.tres" id="3_btvus"]
[ext_resource type="Material" uid="uid://dn16yhnqtqh7i" path="res://addons/kenney_prototype_tools/materials/orange/material_02.tres" id="4_xx0cy"]
[ext_resource type="Texture2D" uid="uid://dcctv40rba8hj" path="res://addons/kenney_prototype_tools/textures/dark/texture_05.png" id="5_v5g73"]
[ext_resource type="Texture2D" uid="uid://bf3ywp0eda70m" path="res://addons/kenney_prototype_tools/textures/orange/texture_02.png" id="6_r2ti8"]

[sub_resource type="GDScript" id="GDScript_sosyv"]
script/source = "extends Node3D


var server := UDPServer.new()
var lidar_server := UDPServer.new()
var turtlebot_position: Vector3 = Vector3.ZERO
var threadReceive = true
var new_pos
var last_position
var obstacle
var vertices:PackedVector3Array=[360]
var obstacle_scene=preload(\"res://assets/objects/Lidar obstacle/lidarobstacle.tscn\")
var obstacle_vett=[]
var turtle_theta
var obstacle_dict = {}
# Called when the node enters the scene tree for the first time.

var lidarThread = null
var exitThread = false
func _ready():
	$RealPose.text=\"RealPose: <NULL>\"
	server.listen(9002)
	lidar_server.listen(9003)
	lidarThread = Thread.new()
	var err = lidarThread.start(threadLidarFunc)
	print(\"Errore? \", err)

func _exit_tree():
	threadReceive = false
	exitThread = true

func _physics_process(delta):
	_receive_pos()

func _on_target_position_on_click(newPosition):
		$VirtualRobot._on_target_position_on_click(newPosition)

func _receive_pos():
	server.poll()
	if server.is_connection_available():
		var peer: PacketPeerUDP = server.take_connection()
		var packet = peer.get_packet()
		turtlebot_position.x=packet.decode_float(0)/1000
		turtlebot_position.y=$VirtualRobot.global_position.y
		turtlebot_position.z=packet.decode_float(4)/-1000
		turtle_theta=packet.decode_float(8)
		$Ghost.global_position = turtlebot_position
		$Ghost.rotation.y=$VirtualRobot.rotation.y
		$RealPose.text=\"RealPose: \"+str(turtlebot_position, turtle_theta)


func threadLidarFunc():
	print(\"Inizio thread\")
	while not exitThread:
		_receive_lidar()
	print(\"Chiudo thread\")
		
func _receive_lidar():
	lidar_server.poll()
	if lidar_server.is_connection_available():
		var peer: PacketPeerUDP = lidar_server.take_connection()
		var packet = peer.get_packet()

		var angles = []
		for i in range(360):
			angles.append(deg_to_rad(i))
			
		var robot_rotation = rotation.y

# Decodifica i dati ricevuti (360 float values)
		for i in range(360):
			var distance = packet.decode_float(i * 4)
# Ignora le letture di Lidar troppo lontane (imposta una soglia)
			if distance> 0 and distance < 0.3:  # Soglia in millimetri (1 metro)
				turtle_theta = turtle_theta if turtle_theta!= null else 0
				var angle = angles[i] + turtle_theta
				

# Verifica se un ostacolo giÃ  esiste in base all'angolo
				if not obstacle_dict.has(i):
					var x = (distance ) * cos(angle) + $VirtualRobot.global_position.x  # Calcola la posizione lungo l'asse X
					var z = (distance ) * sin(angle)*-1 + $VirtualRobot.global_position.z # Calcola la posizione lungo l'asse Y
					var y = $VirtualRobot.global_transform.origin.y
					
# Se non esiste, crea un nuovo ostacolo e aggiungilo alla scena
					var new_obstacle = obstacle_scene.instantiate()
					
					add_child(new_obstacle)
					new_obstacle.global_position = Vector3(x, y, z)
					obstacle_dict[i] = new_obstacle
				else:
					var x = ((distance ) * cos(angle)) + $VirtualRobot.global_position.x  # Calcola la posizione lungo l'asse X
					var z = ((distance ) * sin(angle)*-1) + $VirtualRobot.global_position.z# Calcola la posizione lungo l'asse Y
					var y = $VirtualRobot.global_transform.origin.y
				# Se esiste, aggiorna la sua posizione
					obstacle_dict[i].global_position = Vector3(x, y, z)
				obstacle_dict[i].id_angle = i
				obstacle_dict[i].distance = distance
				obstacle_dict[i].active()
			else:
				# Se il Lidar non rileva un ostacolo, rimuovi l'ostacolo se esiste
				if obstacle_dict.has(i):
					obstacle_dict[i].deactive() 
					#obstacle_dict[i].queue_free()
			#		obstacle_dict[i] = null





"

[sub_resource type="CylinderMesh" id="CylinderMesh_qypgi"]
top_radius = 0.135
bottom_radius = 0.135
height = 0.14

[sub_resource type="PrismMesh" id="PrismMesh_11p1s"]
size = Vector3(0.1, 0.1, 0.019)

[sub_resource type="CylinderShape3D" id="CylinderShape3D_2b3li"]
margin = 0.1
height = 0.14
radius = 0.135

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_pfnxd"]
transparency = 1
vertex_color_is_srgb = true
albedo_color = Color(1, 1, 1, 0.596078)
albedo_texture = ExtResource("5_v5g73")
albedo_texture_force_srgb = true
uv1_triplanar = true
texture_filter = 5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_snmxf"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_gwu5w"]
transparency = 1
vertex_color_is_srgb = true
albedo_color = Color(1, 1, 1, 0.478431)
albedo_texture = ExtResource("6_r2ti8")
uv1_triplanar = true
uv1_world_triplanar = true
texture_filter = 5

[node name="Robot" type="Node3D"]
script = SubResource("GDScript_sosyv")

[node name="VirtualRobot" type="CharacterBody3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0)
script = ExtResource("2_q6eyh")
metadata/_edit_lock_ = true

[node name="BodyMesh" type="MeshInstance3D" parent="VirtualRobot"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.07, 0)
material_override = ExtResource("3_btvus")
mesh = SubResource("CylinderMesh_qypgi")

[node name="DirectionMesh" type="MeshInstance3D" parent="VirtualRobot"]
transform = Transform3D(-1, -8.74228e-08, -3.82137e-15, 0, -4.37114e-08, 1, -8.74228e-08, 1, 4.37114e-08, 0, 0.148, 0.085)
material_override = ExtResource("4_xx0cy")
mesh = SubResource("PrismMesh_11p1s")

[node name="CollisionShape3D" type="CollisionShape3D" parent="VirtualRobot"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.07, 0)
shape = SubResource("CylinderShape3D_2b3li")

[node name="NavigationAgent3D" type="NavigationAgent3D" parent="VirtualRobot"]
process_priority = 1
path_desired_distance = 0.1
target_desired_distance = 0.1
path_max_distance = 0.21
avoidance_enabled = true
radius = 0.1
neighbor_distance = 0.5
time_horizon = 0.01
max_speed = 1.0
debug_enabled = true
debug_use_custom = true
debug_path_custom_color = Color(0.415686, 0.529412, 1, 1)
debug_path_custom_point_size = 8.0

[node name="NavTimer" type="Timer" parent="VirtualRobot"]
wait_time = 0.05
autostart = true

[node name="VirtualPose" type="Label" parent="VirtualRobot"]
offset_left = 210.415
offset_top = 4.0
offset_right = 384.415
offset_bottom = 30.0

[node name="Ghost" type="Node3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0)

[node name="BodyMesh" type="MeshInstance3D" parent="Ghost"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.07, 0)
material_override = SubResource("StandardMaterial3D_pfnxd")
mesh = SubResource("CylinderMesh_qypgi")
surface_material_override/0 = SubResource("StandardMaterial3D_snmxf")

[node name="DirectionMesh" type="MeshInstance3D" parent="Ghost"]
transform = Transform3D(-1, -8.74228e-08, -3.82137e-15, 0, -4.37114e-08, 1, -8.74228e-08, 1, 4.37114e-08, 0, 0.148, 0.085)
material_override = SubResource("StandardMaterial3D_gwu5w")
mesh = SubResource("PrismMesh_11p1s")

[node name="RealPose" type="Label" parent="."]
offset_left = 810.552
offset_top = 4.92635
offset_right = 973.552
offset_bottom = 21.9263

[node name="MarginContainer" type="MarginContainer" parent="."]
offset_right = 40.0
offset_bottom = 40.0
scale = Vector2(1, 1.2)

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2

[node name="Button" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "RESET POSE"

[connection signal="velocity_computed" from="VirtualRobot/NavigationAgent3D" to="VirtualRobot" method="_on_navigation_agent_3d_velocity_computed" flags=18]
[connection signal="timeout" from="VirtualRobot/NavTimer" to="VirtualRobot" method="_on_nav_timer_timeout" flags=18]
[connection signal="pressed" from="MarginContainer/VBoxContainer/Button" to="VirtualRobot" method="_on_button_pressed"]
